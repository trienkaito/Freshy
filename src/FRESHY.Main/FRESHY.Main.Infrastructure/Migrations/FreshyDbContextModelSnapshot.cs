// <auto-generated />
using System;
using FRESHY.Main.Infrastructure.Persistance;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FRESHY.Main.Infrastructure.Migrations
{
    [DbContext(typeof(FreshyDbContext))]
    partial class FreshyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.CartItemAggregate.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BoughtQuantity")
                        .HasColumnType("INT");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("MONEY");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductUnitId");

                    b.ToTable("CartItems", "customer");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.CustomerAggregate.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .HasMaxLength(1000)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasFilter("[Phone] IS NOT NULL");

                    b.ToTable("Customers", "customer");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.CustomerAggregate.Entities.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Carts", "customer");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.EmployeeAggregate.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("CvLink")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Hometown")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR");

                    b.Property<Guid>("JobPositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LivingAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("NVARCHAR");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("JobPositionId");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("Employees", "employee");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.JobPositionAggregate.JobPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(155)
                        .HasColumnType("NVARCHAR");

                    b.Property<decimal>("Salary")
                        .HasColumnType("MONEY");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("JobPositions", "employee");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.OrderAddressAggregate.OrderAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR");

                    b.Property<bool>("IsDefaultAddress")
                        .HasColumnType("BIT");

                    b.Property<bool>("IsShippingAddress")
                        .HasColumnType("BIT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("CHAR");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("OrderAddresses", "customer");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.OrderDetailAggregate.OrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("DATETIME");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderAddress")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasColumnType("VARCHAR")
                        .HasDefaultValue("SUCCESSED");

                    b.Property<double>("PaidAmount")
                        .HasColumnType("float");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("VARCHAR");

                    b.Property<double>("ProductsAmount")
                        .HasColumnType("float");

                    b.Property<Guid?>("ShippingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShippingId");

                    b.HasIndex("VoucherId");

                    b.ToTable("OrderDetails", "order");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.OrderItemAggregate.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BoughtQuantity")
                        .HasColumnType("INT")
                        .HasColumnName("BoughtQuantity");

                    b.Property<Guid>("OrderDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("MONEY")
                        .HasColumnName("TotalProductPrice");

                    b.HasKey("Id");

                    b.HasIndex("OrderDetailId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductUnitId");

                    b.ToTable("ORDER_ITEMS", "order");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.ProductAggregate.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("DATETIME");

                    b.Property<DateTime>("DOM")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("FeatureImage")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("NVARCHAR");

                    b.Property<bool>("IsShowToCustomer")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("SupplierId");

                    b.HasIndex("TypeId");

                    b.ToTable("Products", "product");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.ProductTypeAggregate.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductTypes", "product");

                    b.HasData(
                        new
                        {
                            Id = new Guid("270bd775-dba0-4a97-ae47-25469933793b"),
                            Name = "MEAT"
                        },
                        new
                        {
                            Id = new Guid("46dcce11-f1bf-4be2-98a4-e85689ee3f47"),
                            Name = "SEAFOOD"
                        },
                        new
                        {
                            Id = new Guid("3fa5edf7-6de6-4e09-8a2a-3439ad8c424d"),
                            Name = "VEGATABLES"
                        },
                        new
                        {
                            Id = new Guid("42e3fc9f-43e4-4f93-a1d6-8fb40c1245ec"),
                            Name = "FRUITS"
                        },
                        new
                        {
                            Id = new Guid("de1c643c-d1c2-4745-96b0-900b8a8c4252"),
                            Name = "BEVERAGES"
                        },
                        new
                        {
                            Id = new Guid("1b3f6be8-b0f3-4b24-8077-f72bafe24296"),
                            Name = "DAIRY PRODUCTS"
                        },
                        new
                        {
                            Id = new Guid("1261428f-9ef0-422c-8e07-8a050da9d348"),
                            Name = "CONDIMENTS"
                        },
                        new
                        {
                            Id = new Guid("6c237811-55a3-4a9a-bef6-5b347a4e17b7"),
                            Name = "COMBO"
                        });
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.ProductUnitAggregate.ProductUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ImportPrice")
                        .HasColumnType("MONEY");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("INT");

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("MONEY");

                    b.Property<string>("UnitFeatureImage")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("UnitType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.Property<double>("UnitValue")
                        .HasColumnType("FLOAT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductUnits", "product");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.ReviewAggregate.Entities.ProductLike", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductLikes", "product");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.ReviewAggregate.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("DATETIME");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBeingReply")
                        .HasColumnType("BIT");

                    b.Property<int>("LikeCount")
                        .HasColumnType("INT");

                    b.Property<Guid?>("ParentReviewId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RatingValue")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews", "review");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.ShippingAggregate.Shipping", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("FeatureImage")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("NVARCHAR");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR");

                    b.Property<decimal>("ShippingPrice")
                        .HasColumnType("MONEY")
                        .HasColumnName("ShippingPrice");

                    b.HasKey("Id");

                    b.ToTable("ShippingCompanies", "shipping");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.SupplierAggregate.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("FeatureImage")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("NVARCHAR");

                    b.Property<bool>("IsValid")
                        .HasColumnType("BIT");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("DATETIME");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Suppliers", "supplier");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.VoucherAggregate.Voucher", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR");

                    b.Property<float>("DiscountValue")
                        .HasColumnType("real");

                    b.Property<DateTime>("EndedOn")
                        .HasColumnType("DATETIME");

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartedOn")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("Vouchers", "order");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.CartItemAggregate.CartItem", b =>
                {
                    b.HasOne("FRESHY.Main.Domain.Models.Aggregates.CustomerAggregate.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FRESHY.Main.Domain.Models.Aggregates.ProductAggregate.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FRESHY.Main.Domain.Models.Aggregates.ProductUnitAggregate.ProductUnit", "ProductUnit")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductUnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");

                    b.Navigation("ProductUnit");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.CustomerAggregate.Entities.Cart", b =>
                {
                    b.HasOne("FRESHY.Main.Domain.Models.Aggregates.CustomerAggregate.Customer", "Customer")
                        .WithOne("Cart")
                        .HasForeignKey("FRESHY.Main.Domain.Models.Aggregates.CustomerAggregate.Entities.Cart", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.EmployeeAggregate.Employee", b =>
                {
                    b.HasOne("FRESHY.Main.Domain.Models.Aggregates.JobPositionAggregate.JobPosition", "JobPosition")
                        .WithMany("Employees")
                        .HasForeignKey("JobPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobPosition");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.OrderAddressAggregate.OrderAddress", b =>
                {
                    b.HasOne("FRESHY.Main.Domain.Models.Aggregates.CustomerAggregate.Customer", "Customer")
                        .WithMany("OrderAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.OrderDetailAggregate.OrderDetail", b =>
                {
                    b.HasOne("FRESHY.Main.Domain.Models.Aggregates.CustomerAggregate.Customer", "Customer")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FRESHY.Main.Domain.Models.Aggregates.ShippingAggregate.Shipping", "Shipping")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ShippingId");

                    b.HasOne("FRESHY.Main.Domain.Models.Aggregates.VoucherAggregate.Voucher", "Voucher")
                        .WithMany("OrderDetails")
                        .HasForeignKey("VoucherId");

                    b.Navigation("Customer");

                    b.Navigation("Shipping");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.OrderItemAggregate.OrderItem", b =>
                {
                    b.HasOne("FRESHY.Main.Domain.Models.Aggregates.OrderDetailAggregate.OrderDetail", "OrderDetail")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FRESHY.Main.Domain.Models.Aggregates.ProductAggregate.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FRESHY.Main.Domain.Models.Aggregates.ProductUnitAggregate.ProductUnit", "ProductUnit")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductUnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("OrderDetail");

                    b.Navigation("Product");

                    b.Navigation("ProductUnit");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.ProductAggregate.Product", b =>
                {
                    b.HasOne("FRESHY.Main.Domain.Models.Aggregates.SupplierAggregate.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FRESHY.Main.Domain.Models.Aggregates.ProductTypeAggregate.ProductType", "Type")
                        .WithMany("Products")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.ProductUnitAggregate.ProductUnit", b =>
                {
                    b.HasOne("FRESHY.Main.Domain.Models.Aggregates.ProductAggregate.Product", "Product")
                        .WithMany("Units")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.ReviewAggregate.Entities.ProductLike", b =>
                {
                    b.HasOne("FRESHY.Main.Domain.Models.Aggregates.CustomerAggregate.Customer", "Customer")
                        .WithMany("Likes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FRESHY.Main.Domain.Models.Aggregates.ProductAggregate.Product", "Product")
                        .WithMany("Likes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.ReviewAggregate.Review", b =>
                {
                    b.HasOne("FRESHY.Main.Domain.Models.Aggregates.CustomerAggregate.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("CustomerId");

                    b.HasOne("FRESHY.Main.Domain.Models.Aggregates.EmployeeAggregate.Employee", "Employee")
                        .WithMany("Reviews")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("FRESHY.Main.Domain.Models.Aggregates.ProductAggregate.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.VoucherAggregate.Voucher", b =>
                {
                    b.OwnsOne("FRESHY.Main.Domain.Models.Aggregates.VoucherAggregate.ValueObjects.VoucherCode", "VoucherCode", b1 =>
                        {
                            b1.Property<Guid>("VoucherId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("VARCHAR")
                                .HasColumnName("Code");

                            b1.HasKey("VoucherId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Vouchers", "order");

                            b1.WithOwner()
                                .HasForeignKey("VoucherId");
                        });

                    b.Navigation("VoucherCode")
                        .IsRequired();
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.CustomerAggregate.Customer", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Likes");

                    b.Navigation("OrderAddresses");

                    b.Navigation("OrderDetails");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.CustomerAggregate.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.EmployeeAggregate.Employee", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.JobPositionAggregate.JobPosition", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.OrderDetailAggregate.OrderDetail", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.ProductAggregate.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Likes");

                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.ProductTypeAggregate.ProductType", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.ProductUnitAggregate.ProductUnit", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.ShippingAggregate.Shipping", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.SupplierAggregate.Supplier", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FRESHY.Main.Domain.Models.Aggregates.VoucherAggregate.Voucher", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
